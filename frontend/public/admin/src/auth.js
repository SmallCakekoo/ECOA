// Sistema de autenticaci√≥n para el panel de administraci√≥n
class AuthManager {
  constructor() {
    this.isInitialized = false;
    this.init();
  }

  init() {
    // Verificar autenticaci√≥n al cargar
    this.checkAuth();
    this.isInitialized = true;
  }

  checkAuth() {
    // Solo verificar si no estamos en la p√°gina de login
    if (window.location.pathname.includes("/login")) {
      console.log("‚úÖ Estamos en la p√°gina de login, no verificar auth");
      return;
    }

    console.log("üîê Verificando autenticaci√≥n...");

    // Esperar a que se cargue la API
    const checkAPI = () => {
      if (window.AdminAPI) {
        if (!window.AdminAPI.isAuthenticated()) {
          console.log("‚ùå Usuario no autenticado, redirigiendo al login");
          window.location.href = "/admin/login";
        } else {
          console.log("‚úÖ Usuario autenticado correctamente");
        }
      } else {
        setTimeout(checkAPI, 100);
      }
    };

    checkAPI();
  }

  // Funci√≥n para verificar autenticaci√≥n en cualquier momento
  static verifyAuth() {
    if (window.AdminAPI && !window.AdminAPI.isAuthenticated()) {
      console.log("‚ùå Verificaci√≥n fall√≥, redirigiendo al login");
      window.location.href = "/admin/screens/login";
      return false;
    }
    return true;
  }

  // Funci√≥n para logout
  static logout() {
    console.log("üö™ Cerrando sesi√≥n...");
    if (window.AdminAPI) {
      window.AdminAPI.logout();
    }
    window.location.href = "/admin/screens/login";
  }
}

// Inicializar el manager de autenticaci√≥n
window.AuthManager = new AuthManager();
